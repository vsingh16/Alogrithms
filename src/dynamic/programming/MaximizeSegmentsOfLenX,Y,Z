/**
** https://www.geeksforgeeks.org/maximize-the-number-of-segments-of-length-p-q-and-r/
** https://www.youtube.com/watch?v=O0N4xn38Ncg
** Given a rod of length L, the task is to cut the rod in such a way that the total number of segments of length p, q and r is maximized. 
** The segments can only be of length p, q, and r. 

Examples: 

Input: l = 11, p = 2, q = 3, r = 5 
Output: 5 
Segments of 2, 2, 2, 2 and 3

Input: l = 7, p = 2, q = 5, r = 5 
Output: 2 
Segments of 2 and 5
** Approach: for a length n, we need to try 3 combinations : x, y, x
** if n >=x , 1 + (n-x)
** if n >=y , 1 + (n-y)
** if n >=z , 1 + (n-z)
** Pick max value of above 3.
** If none of above conditions satisfied, we can put INTEGER.MIN_VALUE
**/

/**
** At each length, we have 3 choices
** Time Complexity: O(3^n)
**/
public int maxSegmentCount(int n, int x, int y, int z) {
     if(n == 0){
       return 0;
     }
     
     int rx = Integer.MIN_VALUE, ry = Integer.MIN_VALUE, rz = Integer.MIN_VALUE;
     if (n >= x) {
         rx = 1 + maxSegmentCount(n-x,x,y,x);
       }
     if (n >= y) {
         ry = 1 + maxSegmentCount(n-y,x,y,x);
       }
      if (n >= z) {
         rz = 1 + maxSegmentCount(n-z,x,y,x);
       }
       int result = Math.max(Math.max(rx, ry), rz);
       return result < 0 ? 0: result;
}


/**
** Time Complexity: O(n)
** Space Complexity : O(n)
**/
public int maxSegmentCount(int n, int x, int y, int z) {
     int dp[] = new int[n+1];          
     for(int i=1;i<=n;i++){
          int rx = Integer.MIN_VALUE, ry = Integer.MIN_VALUE, rz = Integer.MIN_VALUE;
          if (i >= x) {
               rx = 1 + dp[i-x];
          }
          if (i >= y) {
               ry = 1 + dp[i-y];
          }
          if (i >= z) {
               rz = 1 + dp[i-z];
          }
          dp[i] = Math.max(Math.max(rx, ry), rz);
     }         
       
       return dp[n] < 0 ? 0: dp[n];
}

}
