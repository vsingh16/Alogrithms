package string;

import java.util.HashSet;
import java.util.Set;

/**
 * Created by vishal on 25-Mar-18.
 * <p>
 * Write a program to generate all subsequence of String
 * <p>
 * A String is a subsequence of a given String, that is generated by deleting some character of a given string without changing its order.
 * <p>
 * Input : abc
 * Output : a, b, c, ab, bc, ac, abc
 * <p>
 * Input : aaa
 * Output : a, aa, aaa
 ** Ref: https://www.youtube.com/watch?v=V0IgCltYgg4&t=975s
 ** https://www.geeksforgeeks.org/print-subsequences-string/
 */
public class Subsequence {

    /**
     * Step 1: Iterate over the entire String
     * Step 2: Iterate from the end of string
     * in order to generate different substring
     * add the subtring to the list
     * Step 3: Drop kth character from the substring obtained
     * from above to generate different subsequence.
     * Step 4: if the subsequence is not in the list then recur.
     * <p>
     * Time Complexity:O(e^x)
     */
    public static void subsequence(String str, Set<String> st) {

        for (int i = 0; i < str.length(); i++) {
            for (int j = str.length(); j > i; j--) {
                String s = str.substring(i, j);
                st.add(s);

                for (int k = 1; k < s.length(); k++) {
                    StringBuilder sb = new StringBuilder(s);
                    //delete characters one by one
                    sb.deleteCharAt(k);
                    //if subSequence is not already processed
                    if (!st.contains(sb)) {
                        subsequence(sb.toString(), st);
                    }
                }
            }
        }
    }

    public static void main(String[] args) {
        String s = "abc";
        Set<String> st = new HashSet<>();
        subsequence(s, st);
        System.out.println(st);
    }
}
=======================================================================================================
    Approach 2: Use Recursion, either pick a character or exlcude
    
import java.util.HashSet;
import java.util.Set;

class Solution {

    /**
    ** Time Complexity: O(n*2^n) . Since Incude or Exclude 2^n for every subsequence we are adding it to Set. Total SUbsequences 2^n and in worst case Set length n
    ** Space Complexity. O(n*2^n) . Recursive Space : O(n). Total Subsequences 2^n and in worst case Set length n. Each stored subsequence can have a length of up to n. O(n) space for each subsequence.
    ** Thus, the total space for the HashSet is O(n*2^n)    
    **/
    static void printSubsequences(String str, int i, String ans, Set<String> subsequences) {

        //Base Case
        if (i == str.length()) {
            subsequences.add(ans);
            return;
        }

        //Exclude
        printSubsequences(str, i + 1, ans, subsequences);

        //Include
        printSubsequences(str, i + 1, ans + str.charAt(i), subsequences);


    }

    public static void main(String[] args) {
        String str = "abc";
        Set<String> subsequences = new HashSet<>();
        printSubsequences(str, 0, "", subsequences);
        subsequences.stream().forEach(System.out::println);


    }


}
